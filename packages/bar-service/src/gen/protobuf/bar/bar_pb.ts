// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file protobuf/bar/bar.proto (package ebf.bar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message ebf.bar.v1.UnaryRequest
 */
export class UnaryRequest extends Message<UnaryRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<UnaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.UnaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnaryRequest {
    return new UnaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnaryRequest {
    return new UnaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnaryRequest {
    return new UnaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnaryRequest | PlainMessage<UnaryRequest> | undefined, b: UnaryRequest | PlainMessage<UnaryRequest> | undefined): boolean {
    return proto3.util.equals(UnaryRequest, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.UnaryResponse
 */
export class UnaryResponse extends Message<UnaryResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<UnaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.UnaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnaryResponse {
    return new UnaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnaryResponse {
    return new UnaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnaryResponse {
    return new UnaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnaryResponse | PlainMessage<UnaryResponse> | undefined, b: UnaryResponse | PlainMessage<UnaryResponse> | undefined): boolean {
    return proto3.util.equals(UnaryResponse, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.ServerStreamRequest
 */
export class ServerStreamRequest extends Message<ServerStreamRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ServerStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.ServerStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStreamRequest {
    return new ServerStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStreamRequest {
    return new ServerStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStreamRequest {
    return new ServerStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ServerStreamRequest | PlainMessage<ServerStreamRequest> | undefined, b: ServerStreamRequest | PlainMessage<ServerStreamRequest> | undefined): boolean {
    return proto3.util.equals(ServerStreamRequest, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.ServerStreamResponse
 */
export class ServerStreamResponse extends Message<ServerStreamResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ServerStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.ServerStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerStreamResponse {
    return new ServerStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerStreamResponse {
    return new ServerStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerStreamResponse {
    return new ServerStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ServerStreamResponse | PlainMessage<ServerStreamResponse> | undefined, b: ServerStreamResponse | PlainMessage<ServerStreamResponse> | undefined): boolean {
    return proto3.util.equals(ServerStreamResponse, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.ClientStreamRequest
 */
export class ClientStreamRequest extends Message<ClientStreamRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ClientStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.ClientStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamRequest {
    return new ClientStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamRequest {
    return new ClientStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamRequest {
    return new ClientStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamRequest | PlainMessage<ClientStreamRequest> | undefined, b: ClientStreamRequest | PlainMessage<ClientStreamRequest> | undefined): boolean {
    return proto3.util.equals(ClientStreamRequest, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.ClientStreamResponse
 */
export class ClientStreamResponse extends Message<ClientStreamResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<ClientStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.ClientStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientStreamResponse {
    return new ClientStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientStreamResponse {
    return new ClientStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientStreamResponse {
    return new ClientStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClientStreamResponse | PlainMessage<ClientStreamResponse> | undefined, b: ClientStreamResponse | PlainMessage<ClientStreamResponse> | undefined): boolean {
    return proto3.util.equals(ClientStreamResponse, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.BiStreamingRequest
 */
export class BiStreamingRequest extends Message<BiStreamingRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<BiStreamingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.BiStreamingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BiStreamingRequest {
    return new BiStreamingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BiStreamingRequest {
    return new BiStreamingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BiStreamingRequest {
    return new BiStreamingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BiStreamingRequest | PlainMessage<BiStreamingRequest> | undefined, b: BiStreamingRequest | PlainMessage<BiStreamingRequest> | undefined): boolean {
    return proto3.util.equals(BiStreamingRequest, a, b);
  }
}

/**
 * @generated from message ebf.bar.v1.BiStreamingResponse
 */
export class BiStreamingResponse extends Message<BiStreamingResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<BiStreamingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ebf.bar.v1.BiStreamingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BiStreamingResponse {
    return new BiStreamingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BiStreamingResponse {
    return new BiStreamingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BiStreamingResponse {
    return new BiStreamingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BiStreamingResponse | PlainMessage<BiStreamingResponse> | undefined, b: BiStreamingResponse | PlainMessage<BiStreamingResponse> | undefined): boolean {
    return proto3.util.equals(BiStreamingResponse, a, b);
  }
}

